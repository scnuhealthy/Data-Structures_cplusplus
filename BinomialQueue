#ifndef BINOMIALQUEUE_H_INCLUDED
#define BINOMIALQUEUE_H_INCLUDED
#include <algorithm>
#include <vector>
using namespace std;

template<typename Comparable>
class BinomialQueue{
public:
	BinomialQueue() :currentSize(0){}

	BinomialQueue(const Comparable & item) :currentSize(0){
		theTrees.push_back(new BinomialNode(item, NULL, NULL));
		++currentSize;
	}

	BinomialQueue(const BinomialQueue & rhs){
		theTrees.resize(rhs.theTrees.size());
		for (int i = 0; i < rhs.theTrees.size(); ++i)
			theTrees[i] = clone(rhs.theTrees[i]);
		currentSize = rhs.currentSize;
	}

	~BinomialQueue(){ makeEmpty(); }

	bool isEmpty() const{
		return theTrees.empty();
	}

	const Comparable & findMin() const{
		return theTrees[findMinIndex()]->element;
	}

	void insert(const Comparable & x){
		BinomialQueue rhs(x);
		merge(rhs);
		++currentSize;
	}

	void deleteMin(){
		if (isEmpty()) return;

		int minIndex = findMinIndex();

		BinomialNode * oldRoot = theTrees[minIndex];
		BinomialNode * deleteTree = oldRoot->leftChild;
		delete oldRoot;

		BinomialQueue deletedQueue;
		deletedQueue.theTrees.resize(minIndex + 1);
		deletedQueue.currentSize = (1 << minIndex) - 1;
		for (int j = minIndex - 1; j >= 0; --j){
			deletedQueue.theTrees[j] = deleteTree;
			deletedTree = deletedTree->nextSibling;
			deleteQueue.theTrees[j]->nextSibling = NULL;
		}

		theTrees[minIndex] = NULL;
		currentSize -= deletedQueue.currentSize + 1;

		merge(deletedQueue);
	}

	void deleteMin(Comparable & minItem){
		if (isEmpty()) return;

		int minIndex = findMinIndex();
		minItem = theTrees[minIndex]->element;

		BinomialNode * oldRoot = theTrees[minIndex];
		BinomialNode * deletedTree = oldRoot->leftChild;
		delete oldRoot;

		BinomialQueue deletedQueue;
		deletedQueue.theTrees.resize(minIndex + 1);
		deletedQueue.currentSize = (1 << minIndex) - 1;
		for (int j = minIndex - 1; j >= 0; --j){
			deletedQueue.theTrees[j] = deletedTree;
			deletedTree = deletedTree->nextSibling;
			deletedQueue.theTrees[j]->nextSibling = NULL;
		}

		theTrees[minIndex] = NULL;
		currentSize -= deletedQueue.currentSize + 1;

		merge(deletedQueue);
	}

	void makeEmpty(){
		for (int i = 0; i != theTrees.size(); ++i)
			makeEmpty(theTrees[i]);
		theTrees.clear();
	}

	void merge(BinomialQueue & rhs){
		if (this == &rhs) return;

		currentSize += rhs.currentSize;

		if (currentSize > capacity()){
			int oldNumTrees = theTrees.size();
			int newNumTrees = max(theTrees.size(), rhs.theTrees.size()) + 1;
			theTrees.resize(newNumTrees);
			for (int i = oldNumTrees; i < newNumTrees; i++)
				theTrees[i] = NULL;
		}

		BinomialNode * carry = NULL;
		for (int i = 0, j = 1; j <= currentSize; i++, j *= 2){
			BinomialNode * t1 = theTrees[i];
			BinomialNode * t2 = i < rhs.theTrees.size() ? rhs.theTrees[i] : NULL;

			int whichCase = t1 == NULL ? 0 : 1;
			whichCase += t2 == NULL ? 0 : 2;
			whichCase += carry == NULL ? 0 : 4;

			switch (whichCase){
			case 0:
			case 1:
				break;
			case 2:
				theTrees[i] = t2;
				rhs.theTrees[i] = NULL;
				break;
			case 4:
				theTrees[i] = carry;
				carry = NULL;
				break;
			case 3:
				carry = combineTrees(t1, t2);
				theTrees[i] = rhs.theTrees[i] = NULL;
				break;
			case 5:
				carry = combineTrees(t1, carry);
				theTrees[i] = NULL;
				break;
			case 6:
				carry = combineTrees(t2, carry);
				rhs.theTrees[i] = NULL;
				break;
			case 7:
				theTrees[i] = carry;
				carry = combineTrees(t1, t2);
				rhs.theTrees[i] = NULL;
				break;
			}
		}

		for (int k = 0; k < rhs.theTrees.size(); k++)
			rhs.theTrees[k] = NULL;
		rhs.currentSize = 0;
	}

	const BinomialQueue & operator= (const BinomialQueue & rhs){
		if (this != &rhs){
			makeEmpty();
			theTrees.resize(rhs.theTrees.size());
			for (int i = 0; i < rhs.theTrees.size(); ++i)
				theTrees[i] = clone(rhs.theTrees[i]);
		}
		return *this;
	}

private:
	struct BinomialNode{
		Comparable element;
		BinomialNode * leftChild;
		BinomialNode * nextSibling;

		BinomialNode(const Comparable & theElement = Comparable(), BinomialNode * lt = NULL, BinomialNode * rt = NULL)
			: element(theElement), leftChild(lt), nextSibling(rt){}
	};

	enum{ DEFAULT_TREES = 1 };

	int currentSize;
	vector<BinomialNode *> theTrees;

	int findMinIndex()const{
		int i, minIndex;

		for (i = 0; theTrees[i] == NULL; ++i);

		for (minIndex = i; i < theTrees.size(); ++i){
			if (theTrees[i] != NULL && theTrees[i]->element < theTrees[minIndex]->element) minIndex = i;
		}
		return minIndex;
	}

	int capacity() const{
		return (1 << theTrees.size()) - 1;
	}

	BinomialNode * combineTrees(BinomialNode * t1, BinomialNode * t2){
		if (t2->element < t1->element) return combineTrees(t2, t1);
		t2->nextSibling = t1->leftChild;
		t1->leftChild = t2;
		return t1;
	}

	void makeEmpty(BinomialNode * & t){
		if (t != NULL){
			makeEmpty(t->leftChild);
			makeEmpty(t->nextSibling);
			delete t;
		}
		t = NULL;
	}

	BinomialNode * clone(BinomialNode * t) const{
		if (t == NULL)
			return NULL;

		return new BinomialNode(t->element, clone(t->leftChild), clone(t->nextSibling));
	}
};


#endif // BINOMIALQUEUE_H_INCLUDED
