#include<iostream>
#include<string>
#include<cmath>
using namespace std;
char Precede(char op1,char op2)//比较运算符优先级
{
    char op=op1;
    int p1,p2;
    if(op=='+'||op=='-')
         p1=1;
    else if(op=='*'||op=='/')
         p1=2;
    else if(op=='s'||op=='c'||op=='t')
         p1=3;
    else p1=0;
    op=op2;
    if(op=='+'||op=='-')
         p2=1;
    else if(op=='*'||op=='/')
         p2=2;
    else if(op=='s'||op=='c'||op=='t')
         p2=3;
    else p2=0;
    if(p1>p2) return '>';
    else if (p1<p2)return '<';
    else if (op1=='-'&&p2==1)return '>';   //当'+'或'-'遇上'-'都要把'-'弹出
    else if (op1=='/'&&p2==2)return '>';   //当'/'或'*'遇上'/'都要把'/'弹出
    else return '=';
};
bool is_d_operator(char c)//是否双目运算符
{
    if(c=='+'||c=='-'||c=='*'||c=='/')
        return 1;
    return 0;
}
bool is_s_operator(char c)
{
    if(c=='s'||c=='t'||c=='c')return 1;
    return 0;
}
bool is_number(char c)
{
    if(c>='0'&&c<='9')return 1;
    return 0;
}
bool is_correct_string(string s)//检查字符串是否合法
{
    int l=s.length();
    int count=0;
    for(int i=0;i<l-1;i++)
    {
       if(s[i]=='.'||s[i]=='^')//检查小数点两端的字符是否为数字
       {
           if (i==0||i==l-2)return 0;
           else if(is_number(s[i-1])!=1||is_number(s[i+1])!=1){return 0;}
       }

       else if(is_d_operator(s[i]))//检查双目算符左右两端的字符是否合法
         {
            if (i==0||i==l-2)return 0;
            else if(is_s_operator(s[i+1])) i=i;
            else if((is_number(s[i-1])!=1&&s[i-1]!=')')||(is_number(s[i+1])!=1&&s[i+1]!='('))return 0;
         }

      else if(s[i]=='s')//检查sin
         {
             if(s[i+1]!='i'||s[i+2]!='n')return 0;
             else i+=2;
         }
      else if(s[i]=='c')//检查cos
         {
             if(s[i+1]!='o'||s[i+2]!='s')return 0;
             else i+=2;
         }
      else if(s[i]=='t')//检查tan
         {
             if(s[i+1]!='a'||s[i+2]!='n')return 0;
             else i+=2;
         }
     else if(s[i]=='(')count++;
     else if(s[i]==')')
        {if (count==0)return 0;//少了左括号
        else count--;}
     else if(is_number(s[i])) {i=i;}
     else return 0;
    }
    if(s[l-1]!='=')return 0;//最后一个字符应为等号
    if (count!=0) return 0;//多了右括号
    return 1;
}
class operstack
{
private:
    char oper[200];
    int top;
public:
    operstack():top(0){oper[0]='=';}//栈顶指针指向栈顶
    void push(char c)
    {
        top++;
        oper[top]=c;
    }
    void pop()
    {
        top--;
    }
    char gettop()
    {
        return oper[top];
    }

};
class numstack
{
private:
    double num[200];
    int top;
public:
    numstack():top(-1){}//栈顶指针指向栈顶
    void push(double r)
    {
        top++;
        num[top]=r;
    }
    void pop()
    {
        top--;
    }
    double gettop()
    {
        return num[top];
    }
    void replace_top(double r)
    {
        num[top]=r;
    }
};
string change(string s)//转化为后缀表示式
{
    int i=0;int j=0;
    string b;
    operstack stack;
    b.resize(200,'a');
    while(s[i]!='=')
    {
        if(is_d_operator(s[i]))
           {
            b[j]=' ';                            //遇到运算符时，为分隔数字，插入空格符
            j++;
            if(Precede(stack.gettop(),s[i])=='>'&&stack.gettop()!='(')//须比较栈顶运算符与入栈运算符的优先级,如果入栈运算符优先级低，则弹出栈顶元素
                {
                  b[j]=stack.gettop();
                  stack.pop();
                  j++;
                }
             stack.push(s[i]);
           }
        else if(is_s_operator(s[i]))//单目运算符运算符优先级必最高，不用比较
        {
            b[j]=' ';               //遇到运算符时，为分隔数字，插入空格符
            j++;
            stack.push(s[i]);
            i+=2;                   //只需要存's'代表sin
        }
        else if(s[i]=='(')           //当遇到左括号，五条家入栈
        {
            stack.push(s[i]);
        }
        else if(s[i]==')')           //当遇到右扩号时，将一对括号内的符号pop
        {
            while(1)
            {
                if(stack.gettop()!='(')
                {
                    b[j]=stack.gettop();
                    stack.pop();
                    j++;
                }
                else
                {
                    stack.pop();
                    break;
                }
            }
        }
        else if(is_number(s[i])||s[i]=='.'||s[i]=='^')
        {
                b[j]=s[i];j++;
        }
        i++;
    }
    while(1)
    {
        if(stack.gettop()=='=') {b[j]=' ';b[j+1]='=';break;}//保留多一个空格,在cal函数在=前有时须进行一次运算
        b[j]=stack.gettop();
        stack.pop();
        j++;
    }
    return b;
}
double cal(string s)
{
    int i=0;
    double num=0;
    bool t=0;                  //防止多个空格以致错误入栈
    numstack stack;
    while(s[i]!='=')
    {
        if(is_number(s[i]))
        {
            num*=10;
            num+=s[i]-48;
            t=1;                //允许入栈
        }
        else if(s[i]=='^')
        {
            double fnum=0;
            i++;
            while(is_number(s[i]))
            {
                fnum*=10;
                fnum+=s[i]-48;
                i++;
            }
            i--;
            num=pow(num,fnum);
        }
        else if(s[i]=='.')
        {
            int pten=1;
            i++;
            while(is_number(s[i]))
            {
                double nnum=s[i]-48;
                for(int k=0;k<pten;k++)
                {
                    nnum/=10;
                }
                num+=nnum;
                pten++;
                i++;
            }
            i--;
        }
         if(is_number(s[i])!=1&&s[i]!='.'&&s[i]!='^')
        {
            if(t){stack.push(num);}
            num=0;                       //重置num
            t=0;                         //允许入栈
        }
        if(is_d_operator(s[i]))
        {
            if(s[i]=='+'){double a=stack.gettop();stack.pop();stack.replace_top(a+stack.gettop());}
            else if(s[i]=='-'){double a=stack.gettop();stack.pop();stack.replace_top(stack.gettop()-a);}
            else if(s[i]=='*'){double a=stack.gettop();stack.pop();stack.replace_top(stack.gettop()*a);}
            else {double a=stack.gettop();stack.pop();stack.replace_top(stack.gettop()/a);}
        }
        if(is_s_operator(s[i]))
        {
            if(s[i]=='s'){stack.replace_top(sin(stack.gettop()));}
            else if(s[i]=='c'){stack.replace_top(cos(stack.gettop()));}
            else if(s[i]=='t'){stack.replace_top(tan(stack.gettop()));}
        }
        i++;
    }
    return stack.gettop();
}
void alldo(string eq)
{
    if(is_correct_string(eq)==0)
    {
        cout<<"输入错误，请检查"<<endl;
    }
    else
    {
        cout<<cal(change(eq))<<endl;
    }
}
int main()
{
    /*
    double a=36;double b=3;
    string eq="2.5+sin(5*8-4)=";
    alldo(eq);
    cout<<sin(a)+2.5<<endl;
    alldo("5+tan((4))*8=");
    a=4;
    cout<<5+tan((a))*8<<endl;
    alldo("4 + 5=");//不允许空格
    alldo("9/4=");
    cout<<pow(a,b)<<endl;
    alldo("2^10+7*2=");//应输出78
    alldo("3367=");
    */
    string s;
    cin>>s;
    alldo(s);
    return 0;
}
