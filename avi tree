#include<iostream>
#include<cmath>
using namespace std;
template<typename Comparable>
class BinarySearchTree
{
public:
    BinarySearchTree(){root=NULL;}
    BinarySearchTree(const BinarySearchTree&rhs){root=clone(rhs.root);}//不能调用重载=
    ~BinarySearchTree();
    const Comparable &findMin()const{return findMin(root)->element;}
    const Comparable &findMax()const{return findMax(root)->element;}
    bool contains(const Comparable &x)const;
    bool isempty()const{return root==NULL;}
    void printTree()const{printTree(root,0);}
    void makeEmpty(){makeEmpty(root);}
    void insert(const Comparable &x);
    void remove(const Comparable &x);
    const BinarySearchTree &operator=(const BinarySearchTree &rhs);
private:
    struct BinaryNode
    {
    Comparable element;
    BinaryNode *left;
    BinaryNode *right;
    int height;
    BinaryNode(const Comparable &theElement,BinaryNode*lt,BinaryNode*rt,int h=0):element(theElement),left(lt),right(rt),height(h){}
    };
public:
    BinaryNode *root;
    void insert(const Comparable &x,BinaryNode *&t);
    void remove(const Comparable &x,BinaryNode *&t);
    bool contains(const Comparable &x,BinaryNode *t)const;
    void makeEmpty(BinaryNode *&t);
    void printTree(BinaryNode *t,int depth)const;
    int height(BinaryNode *t)const;

    void rotateWithLeftChild(BinaryNode *&k2);
    void rotateWithRightChild(BinaryNode *&k1);
    void doubleWithLeftChild(BinaryNode *&k3);
    void doubleWithRightChild(BinaryNode *&k3);
    BinaryNode *findMin(BinaryNode *t)const
    {
      if(t==NULL)
        return NULL;
      if(t->left==NULL)
        return t;
      return findMin(t->left);
    }
    BinaryNode *findMax(BinaryNode *t)const
    {
     if(t!=NULL)
        while(t->right!=NULL)
        t=t->right;
     return t;
    }
    BinaryNode *clone(BinaryNode *t)const
    {
     if(t==NULL)
        return NULL;
     return new BinaryNode(t->element,clone(t->left),clone(t->right));
    }
};
template<typename Comparable>
bool BinarySearchTree<Comparable>::contains(const Comparable &x)const
{
    return contains(x,root);
}
template<typename Comparable>
void BinarySearchTree<Comparable>::insert(const Comparable &x)
{
    insert(x,root);
}
template<typename Comparable>
void BinarySearchTree<Comparable>::remove(const Comparable &x)
{
    remove(x,root);
}
template<typename Comparable>
bool BinarySearchTree<Comparable>::contains(const Comparable &x,BinaryNode *t)const
{
    if(t==NULL)
        return false;
    else if(x<t->element)
        return contains(x,t->left);
    else if(t->element<x)
        return contains(x,t->right);
    else
        return true;
}
template<typename Comparable>
void BinarySearchTree<Comparable>::insert(const Comparable &x,BinaryNode *&t)
{
    if(t==NULL)
        t=new BinaryNode(x,NULL,NULL);
    else if(x<t->element)
    {
        insert(x,t->left);
        if(height(t->left)-height(t->right)==2)
            if(x<t->left->element)
              rotateWithLeftChild(t);
            else
              doubleWithLeftChild(t);
    }
    else if(t->element<x)
        insert(x,t->right);
        if(height(t->right)-height(t->left)==2)
            if(x>t->right->element)
              rotateWithRightChild(t);
            else
              doubleWithRightChild(t);
    else;
    t->height=max(height(t->left),height(t->right))+1;
}
template<typename Comparable>
void BinarySearchTree<Comparable>::remove(const Comparable &x,BinaryNode *&t)
{
    if(t==NULL)
        return ;
    if(x<t->element)
        {
            remove(x,t->left);
            if(height(t->right)-height(t->left)==2)
               if(height(t->right->right)>=height(t->right->left))
                 rotateWithRightChild(t);
            else
                 doubleWithRightChild(t);
        }
    else if(t->element<x)
        {
            remove(x,t->right);
            if(height(t->left)-height(t->right)==2)
               if(height(t->left->left)>=height(t->left->right))
                 rotateWithLeftChild(t);
               else
                 doubleWithLeftChild(t);
        }
    else if(t->left!=NULL&&t->right!=NULL)
    {
        t->element=findMin(t->right)->element;
        remove(t->element,t->right);
        if(height(t->left)-height(t->right)==2)
            if(height(t->left->left)>=height(t->left->right))
                 rotateWithLeftChild(t);
            else
                 doubleWithLeftChild(t);
    }
    else
    {
        BinaryNode *oldNode=t;
        t=(t->left!=NULL)?t->left:t->right;//指向新的结点
        delete oldNode;//删除结点
    }
    if(t!=NULL)t->height=max(height(t->left),height(t->right))+1;
}
template<typename Comparable>
BinarySearchTree<Comparable>::~BinarySearchTree()
{
    makeEmpty();
}
template<typename Comparable>
void BinarySearchTree<Comparable>::makeEmpty(BinaryNode *&t)
{
    if(t!=NULL)
    {
        makeEmpty(t->left);
        makeEmpty(t->right);
        delete t;
    }
    t=NULL;
}
template<typename Comparable>
const BinarySearchTree<Comparable>&BinarySearchTree<Comparable>::operator=(const BinarySearchTree &rhs)
{
    if(this!=&rhs)           //复制构造函数不能调用重载=因为现在this不存在
    {
        makeEmpty();
        root=clone(rhs.root);
    }
    return *this;
}
template<typename Comparable>
void BinarySearchTree<Comparable>::printTree(BinaryNode *t,int depth)const
{
     for(int i=0;i<depth;i++)
     {
         cout<<" ";
     }
     cout<<t->element<<endl;
     if(t->left!=NULL)printTree(t->left,depth+1);
     if(t->right!=NULL)printTree(t->right,depth+1);
}
template<typename Comparable>
int BinarySearchTree<Comparable>::height(BinaryNode *t)const
{
    return t==NULL?-1:t->height;
}
template<typename Comparable>
void BinarySearchTree<Comparable>::rotateWithLeftChild(BinaryNode *&k2)
{
    BinaryNode *k1=k2->left;
    k2->left=k1->right;
    k1->right=k2;
    k2->height=max(height(k2->left),height(k2->right))+1;
    k1->height=max(height(k1->left),k2->height)+1;
    k2=k1;
}
template<typename Comparable>
void BinarySearchTree<Comparable>::rotateWithRightChild(BinaryNode *&k1)
{
    BinaryNode *k2=k1->right;
    k1->right=k2->left;
    k2->left=k1;
    k1->height=max(height(k1->left),height(k1->right))+1;
    k2->height=max(height(k2->right),k1->height)+1;
    k1=k2;
}
template<typename Comparable>
void BinarySearchTree<Comparable>::doubleWithLeftChild(BinaryNode *&k3)
{
    rotateWithRightChild(k3->left);
    rotateWithLeftChild(k3);
}
template<typename Comparable>
void BinarySearchTree<Comparable>::doubleWithRightChild(BinaryNode *&k3)
{
    rotateWithLeftChild(k3->right);
    rotateWithRightChild(k3);
}
int main()
{
    BinarySearchTree<int> tree;
    tree.insert(5);
    tree.insert(2);
    tree.insert(4);
    tree.insert(1);
    tree.insert(3);
    tree.insert(6);
    tree.insert(8);
    tree.insert(7);
    //tree.printTree();
    tree.remove(7);
    tree.printTree();
    //if(tree.root->left==NULL)cout<<1<<endl;
    return 0;
}

